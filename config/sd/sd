#!/usr/bin/env python3
import os
import subprocess
import stat
import sys

# idea from: https://ianthehenry.com/posts/a-cozy-nest-for-your-scripts/
#            https://github.com/ianthehenry/sd#installation

"""
# use the chain of words to find the script
sd git sync

-> $(sd --bin-path)/git/sync

# you can use named args (but not unnamed argv)
sd git sync --all
# I think it'd be hard to support shortform flags, so maybe this is unsupported
# for now:
sd git sync -a



# edit (or create) a script
sd git sync --edit
# TODO: maybe like this?
sd git --edit sync 
"""

def bin_dir():
    """
    the bin dir is where user scripts are kept. by default the bin dir is a
    sibling to sd itself.
    """
    path_to_sd = __file__
    return os.path.join(os.path.dirname(path_to_sd), "bin")

def sd_command(args):
    if "--bin-path" in args:
        print(bin_dir())
        exit(0)
    print("we need to figure out how to parse these")
    print(args)
    exit(1)

def parse_args(args):
    (sd_bin, *remaining_args) = args
    # check if first arg is a flag
    if remaining_args[0].startswith("--"):
        return sd_command(remaining_args)

    edit_mode = remaining_args[-1] == "--edit"
    # find the first arg that looks like a flag
    first_flag = None
    for i, e in enumerate(remaining_args):
        if e.startswith("--"):
            first_flag = i
            break
    if first_flag is not None:
        bin_coordinates, remaining_args = remaining_args[:first_flag], remaining_args[first_flag:]
    else:
        bin_coordinates = remaining_args
        # zero out the rest
        remaining_args = []

    bin_path = os.path.join(*bin_coordinates)


    if first_flag is None:
        pass

    return sd_bin, os.path.join(bin_dir(), bin_path), remaining_args, edit_mode

def open_for_editing(path_to_bin):
    os.makedirs(os.path.dirname(path_to_bin), exist_ok=True)
    editor = os.environ.get("EDITOR", "nano")
    edit_result = subprocess.run([editor, path_to_bin])
    if edit_result.returncode == 0:
        os.chmod(path_to_bin, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)
        return exit(0)
    else:
        return exit(edit_result.returncode)


def run_command(path_to_bin, args_to_bin):
    try:
        finished = subprocess.run([path_to_bin] + args_to_bin)
        return exit(finished.returncode)
    except FileNotFoundError:
        print(f"script not found, no file: '{path_to_bin}'")
        raise

def main(args):
    (_sd, path_to_bin, args_to_bin, edit_mode) = parse_args(args)
    if edit_mode:
        return open_for_editing(path_to_bin)
    else:
        try:
            return run_command(path_to_bin, args_to_bin)
        except FileNotFoundError:
            print("create script with:")
            print(f"    {' '.join(args)} --edit")



if __name__ == "__main__":
    main(sys.argv)


def test_parse_args():
    (sd, path_to_bin, args_to_bin, edit_mode) = parse_args(["sd", "git", "sync", "--all", "--source", "gitlab.com"])
    assert sd == "sd"
    assert path_to_bin.endswith("bin/git/sync")
    assert args_to_bin == ["--all", "--source", "gitlab.com"]
