# sources of inspo
# https://github.com/Parasrah/kak-config/blob/master/kakrc
# https://github.com/mawww/config/blob/master/kakrc

# already hopping on the plugin-manager train
# mkdir -p ~/.config/kak/plugins/
# git clone https://github.com/robertmeta/plug.kak.git ~/.config/kak/plugins/plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "TeddyDD/kakoune-wiki"

wiki-setup %sh{ echo $HOME/kak-wiki }

# match kitty
colorscheme gruvbox

# kakoune by default has a 'user mode', similar to vim's <leader>
# most people immediately pick a new leader, <space> but i'm gonna chill on the default `,` for a while

map global user t '<a-|>~/.dotfiles/custom-scripts/tmux_send.sh<ret>' -docstring 'sends text to tmux pane'
# pruning this down to the good one
#map global user k '<a-|>~/.dotfiles/custom-scripts/kitty_send.sh<ret>' -docstring 'sends text to kitty pane'
#map global user K '<a-|>~/.dotfiles/custom-scripts/kitty_chunked_send.sh<ret>' -docstring 'sends text in chunks to kitty pane'
map global user c '<a-|>~/.dotfiles/custom-scripts/python_kitty_chunked_send.py<ret>' -docstring 'sends text in linewise chunks to kitty pane'
map global user w ':w<ret>' -docstring 'write'
map global user q ':q<ret>' -docstring 'quit'

# need --column so the toolsclient (or jumpclient?) knows how to open the file
set-option global grepcmd 'rg --column '

map global user s ':grep -i ' -docstring 'search project'
map global user S ':grep<ret>' -docstring 'search project with selection'

map global user h ':github-open<ret>' -docstring 'open selection in GitHub'

map global user ` ':source ~/.config/kak/kakrc<ret>' -docstring 'reload kakrc'

# replacement for fzf.kak in kitty, found on https://github.com/mawww/kakoune/wiki/Fuzzy-finder
define-command find -params 1 -shell-script-candidates %{ find . -type f } %{ edit %arg{1} }
map -docstring 'search for files by name' global normal '<c-l>' ':find '

define-command -docstring %{
    Opens the selection range in GitHub
} github-open %{
    evaluate-commands %sh{
        SELECTED_URL=$(${kak_config}/bin/github-url.sh ${kak_buffile} ${kak_selection_desc})
        printf %s\\n "echo opening $SELECTED_URL"
        # assume `open $URL` opens the browser
        open $SELECTED_URL
    }
}

# custom autocomplete for wiki links
#
#
# copying the structure from jedi python completion
declare-option -hidden str wiki_link_tmp_dir
declare-option -hidden completions wiki_link_completions

# populate the `wiki_link_completions` option with files valid for linking-to
define-command wiki-link-autocomplete -docstring "Complete the current selection" %{
    echo -debug running the link completer now
    evaluate-commands %sh{
        printf %s\\n "echo -debug client is ${kak_client} "
    }
    evaluate-commands %sh{
        dir=$(mktemp -d "${TMPDIR:-/tmp}"/kak-wiki-link.XXXXXXXX)
        mkfifo ${dir}/fifo
        printf %s\\n "set-option buffer wiki_link_tmp_dir ${dir}"
        printf %s\\n "evaluate-commands -no-hooks write -sync ${dir}/buf"
    }
    evaluate-commands %sh{
        dir=${kak_opt_wiki_link_tmp_dir}
        printf %s\\n "evaluate-commands -draft %{ edit! -fifo ${dir}/fifo *wiki-link-autocomplete-output* }"
        ((
            cd $(dirname ${kak_buffile})
            header="${kak_cursor_line}.${kak_cursor_column}@${kak_timestamp}"
            compl=$(${kak_config}/bin/kakoune-wiki-link-find.sh $HOME/kak-wiki)
            printf %s\\n "evaluate-commands -client ${kak_client} %~echo completed; set-option %{buffer=${kak_buffile}} wiki_link_completions ${header} ${compl}~" | kak -p ${kak_session}
            rm -r ${dir}
        ) & ) > /dev/null 2>&1 < /dev/null
    }
    echo -debug done running the link completer
}

define-command wiki-link-enable-autocomplete -docstring "Add wiki-link completion candidates to the completer" %{
    echo -debug wiki-link-stuff-enabled
    set-option window completers option=wiki_link_completions %opt{completers}
    hook window -group wiki-link-autocomplete InsertIdle .* %{ try %{
        execute-keys -draft <a-h><a-k>\B@.\z<ret>
        echo 'wiki link completing...'
        wiki-link-autocomplete
    } }
    alias window complete wiki-link-autocomplete
}

define-command wiki-link-disable-autocomplete -docstring "Disable wiki-link completion" %{
    echo -debug wiki-link-stuff-disabled
    set-option window completers %sh{ printf %s\\n "'${kak_opt_completers}'" | sed -e 's/option=wiki_link_completions://g' }
    remove-hooks window wiki-link-autocomplete
    unalias window complete wiki-link-autocomplete
}

# add hooks for the above
evaluate-commands %sh{
    printf %s\\n "hook global BufCreate $HOME/kak-wiki/.+\.md %{ wiki-link-enable-autocomplete }"
}

define-command wiki-today -docstring "Open a file with today's date via kakoune-wiki" %{
    evaluate-commands %sh{
        # date fn on macos. might break on linux
        printf %s\\n "wiki $(date +%Y-%m-%d).md"
    }
}
